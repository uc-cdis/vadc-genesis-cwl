{
  "input": {
    "covariates": "gender Hare",
    "gds_files": [
      {
        "class": "File",
        "path": "USER/hapmap-ceu_chr1.gds"
      }
    ],
    "genome_build": "hg19",
    "n_pcs": 3,
    "n_segments": 1,
    "out_prefix": "test",
    "outcome": "height",
    "pca_file": {
      "class": "File",
      "path": "USER/hapmap_test_pcair_pca.RData"
    },
    "phenotype_file": {
      "class": "File",
      "path": "USER/hapmap_pheno_demo.RData"
    },
    "relatedness_matrix_file": {
      "class": "File",
      "path": "USER/hapmap_test_pcrelate_pcrelate_Matrix.RData"
    },
    "sample_include_file": {
      "class": "File",
      "path": "USER/hapmap-samples.Rdata"
    }
  },
  "manifest": [],
  "workflow": {
    "$graph": [
      {
        "arguments": [],
        "baseCommand": [
          "sh",
          "script.sh"
        ],
        "class": "CommandLineTool",
        "cwlVersion": "v1.0",
        "doc": "# Null model\nAssociation tests are done with a mixed model if a kinship matrix or GRM \n(`relatedness_matrix_file`) is given in the config file. If \n`relatedness_matrix_file` is `NA` or missing, testing is done with a fixed \neffects model.  \n\nWhen combining samples from groups with different variances for a trait \n(e.g., study or ancestry group), it is recommended to allow the null model to \nfit heterogeneous variances by group using the parameter `group_var`. The \ndefault pipeline options will then result in the following procedure:\n\n1. Fit null mixed model with outcome variable\n    - Allow heterogeneous variance by `group_var`\n    - Include covariates and PCs as fixed effects\n    - Include kinship as random effect\n2. Inverse normal transform marginal residuals (if `inverse_normal = TRUE`)\n3. Rescale variance to match original (if `rescale_variance = \"marginal\"` or `\"varcomp\"`)\n4. Fit null mixed model using transformed residuals as outcome\n    - Allow heterogeneous variance by `group_var`\n    - Include covariates and PCs as fixed effects\n    - Include kinship as random effect\n",
        "id": "#genesis_null_model.cwl",
        "inputs": [
          {
            "default": "genesis_topmed_null_model",
            "doc": "Prefix for files created by the software",
            "id": "#genesis_null_model.cwl/out_prefix",
            "type": [
              "string",
              "null"
            ]
          },
          {
            "doc": "An RData object containing a vector of sample.id to include.",
            "id": "#genesis_null_model.cwl/sample_include_file",
            "type": [
              "File",
              "null"
            ]
          },
          {
            "doc": "RData file with AnnotatedDataFrame of phenotypes.",
            "id": "#genesis_null_model.cwl/phenotype_file",
            "type": "File"
          },
          {
            "doc": "RData or GDS file with a kinship matrix or GRM.",
            "id": "#genesis_null_model.cwl/relatedness_matrix_file",
            "type": [
              "File",
              "null"
            ]
          },
          {
            "default": 0,
            "doc": "Number of PCs to include as covariates.",
            "id": "#genesis_null_model.cwl/n_pcs",
            "type": [
              "int",
              "null"
            ]
          },
          {
            "doc": "Names of columns phenotype_file containing covariates. Separate by spaces.\ne.g. `gender height healthy`",
            "id": "#genesis_null_model.cwl/covariates",
            "type": [
              "string",
              "null"
            ]
          },
          {
            "doc": "Name of column in Phenotype File containing outcome variable.",
            "id": "#genesis_null_model.cwl/outcome",
            "type": "string"
          },
          {
            "default": "FALSE",
            "doc": "TRUE if outcome is a binary (case/control) variable; \nFALSE if outcome is a continuous variable.",
            "id": "#genesis_null_model.cwl/outcome_is_binary",
            "type": {
              "symbols": [
                "TRUE",
                "FALSE"
              ],
              "type": "enum"
            }
          },
          {
            "doc": "RData file with PCA results created by PC-AiR.",
            "id": "#genesis_null_model.cwl/pca_file",
            "type": [
              "File",
              "null"
            ]
          }
        ],
        "label": "UW GAC (GENESIS) Null Model",
        "outputs": [
          {
            "doc": "Null model files",
            "id": "#genesis_null_model.cwl/null_model_files",
            "outputBinding": {
              "glob": "$(inputs.out_prefix + '_datadir/*')"
            },
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "doc": "Phenotypes file",
            "id": "#genesis_null_model.cwl/null_model_phenotype",
            "outputBinding": {
              "glob": "$(inputs.out_prefix + '_phenotypes.Rdata')"
            },
            "type": "File"
          },
          {
            "doc": "HTML Reports generated by the tool + Rmd files",
            "id": "#genesis_null_model.cwl/reports",
            "outputBinding": {
              "glob": "$(inputs.out_prefix + '_reports/*')"
            },
            "type": {
              "items": "File",
              "type": "array"
            }
          }
        ],
        "requirements": [
          {
            "class": "DockerRequirement",
            "dockerPull": "uwgac/topmed-master:2.6.0"
          },
          {
            "class": "InitialWorkDirRequirement",
            "listing": [
              {
                "entry": "${\n   var arg = [];\n\n   arg.push('out_prefix ' + inputs.out_prefix);\n   arg.push('phenotype_file ' + inputs.phenotype_file.path);\n   arg.push('outcome ' + inputs.outcome);\n   arg.push('binary ' + inputs.outcome_is_binary);\n   arg.push('n_pcs ' + inputs.n_pcs);\n\n   if(inputs.pca_file){\n     arg.push(\"pca_file \" + inputs.pca_file.path);\n   }\n\n   if(inputs.relatedness_matrix_file){\n     arg.push(\"relatedness_matrix_file \" + inputs.relatedness_matrix_file.path);\n   }\n\n   if(inputs.covariates){\n     arg.push(\"covars '\" + inputs.covariates + \"'\");\n   }\n\n   if(inputs.sample_include_file) {\n     arg.push(\"sample_include_file \" + inputs.sample_include_file.path);\n   }\n   arg.push('out_phenotype_file ' + inputs.out_prefix + '_phenotypes.Rdata');\n   return arg.join('\\n');\n } ",
                "entryname": "null_model.config"
              },
              {
                "entry": "set -xe\ncat null_model.config\n\nRscript /usr/local/analysis_pipeline/R/null_model.R null_model.config\nRscript /usr/local/analysis_pipeline/R/null_model_report.R null_model.config --version 2.6.0\nls -al\n\nDATADIR=$(inputs.out_prefix)_datadir\nmkdir $DATADIR\nmv $(inputs.out_prefix)*.RData $DATADIR/\n\nREPORTDIR=$(inputs.out_prefix)_reports\nmkdir $REPORTDIR\nmv *.html $REPORTDIR/\nmv *.Rmd $REPORTDIR/\n",
                "entryname": "script.sh"
              }
            ]
          },
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "class": "ResourceRequirement",
            "coresMax": 2,
            "coresMin": 2,
            "ramMax": 2000,
            "ramMin": 2000
          }
        ]
      },
      {
        "class": "Workflow",
        "cwlVersion": "v1.0",
        "id": "#null-model-wf.cwl",
        "inputs": [
          {
            "id": "#null-model-wf.cwl/n_pcs",
            "type": [
              "int",
              "null"
            ]
          },
          {
            "id": "#null-model-wf.cwl/out_prefix",
            "type": [
              "string",
              "null"
            ]
          },
          {
            "id": "#null-model-wf.cwl/covariates",
            "type": [
              "string",
              "null"
            ]
          },
          {
            "id": "#null-model-wf.cwl/outcome",
            "type": "string"
          },
          {
            "default": "FALSE",
            "id": "#null-model-wf.cwl/outcome_is_binary",
            "type": {
              "symbols": [
                "TRUE",
                "FALSE"
              ],
              "type": "enum"
            }
          },
          {
            "id": "#null-model-wf.cwl/pca_file",
            "type": [
              "File",
              "null"
            ]
          },
          {
            "id": "#null-model-wf.cwl/phenotype_file",
            "type": "File"
          },
          {
            "id": "#null-model-wf.cwl/relatedness_matrix_file",
            "type": [
              "File",
              "null"
            ]
          },
          {
            "id": "#null-model-wf.cwl/sample_include_file",
            "type": [
              "File",
              "null"
            ]
          }
        ],
        "label": "genesis_null_model_wf",
        "outputs": [
          {
            "id": "#null-model-wf.cwl/null_model_reports",
            "outputSource": "#null-model-wf.cwl/run_null_model/reports",
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "id": "#null-model-wf.cwl/null_model_files",
            "outputSource": "#null-model-wf.cwl/run_null_model/null_model_files",
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "id": "#null-model-wf.cwl/null_model_phenotype_file",
            "outputSource": "#null-model-wf.cwl/run_null_model/null_model_phenotype",
            "type": "File"
          }
        ],
        "steps": [
          {
            "id": "#null-model-wf.cwl/run_null_model",
            "in": [
              {
                "id": "#null-model-wf.cwl/run_null_model/covariates",
                "source": "#null-model-wf.cwl/covariates"
              },
              {
                "id": "#null-model-wf.cwl/run_null_model/out_prefix",
                "source": "#null-model-wf.cwl/out_prefix"
              },
              {
                "id": "#null-model-wf.cwl/run_null_model/outcome",
                "source": "#null-model-wf.cwl/outcome"
              },
              {
                "id": "#null-model-wf.cwl/run_null_model/outcome_is_binary",
                "source": "#null-model-wf.cwl/outcome_is_binary"
              },
              {
                "id": "#null-model-wf.cwl/run_null_model/pca_file",
                "source": "#null-model-wf.cwl/pca_file"
              },
              {
                "id": "#null-model-wf.cwl/run_null_model/phenotype_file",
                "source": "#null-model-wf.cwl/phenotype_file"
              },
              {
                "id": "#null-model-wf.cwl/run_null_model/relatedness_matrix_file",
                "source": "#null-model-wf.cwl/relatedness_matrix_file"
              },
              {
                "id": "#null-model-wf.cwl/run_null_model/n_pcs",
                "source": "#null-model-wf.cwl/n_pcs"
              },
              {
                "id": "#null-model-wf.cwl/run_null_model/sample_include_file",
                "source": "#null-model-wf.cwl/sample_include_file"
              }
            ],
            "out": [
              "#null-model-wf.cwl/run_null_model/null_model_files",
              "#null-model-wf.cwl/run_null_model/null_model_phenotype",
              "#null-model-wf.cwl/run_null_model/reports"
            ],
            "run": "#genesis_null_model.cwl"
          }
        ]
      },
      {
        "arguments": [],
        "baseCommand": [
          "python3",
          "splitfilename.py"
        ],
        "class": "CommandLineTool",
        "cwlVersion": "v1.0",
        "id": "#splitfilename_python.cwl",
        "inputs": [
          {
            "id": "#splitfilename_python.cwl/vcf_file",
            "inputBinding": {
              "position": 0
            },
            "type": "File"
          }
        ],
        "outputs": [
          {
            "id": "#splitfilename_python.cwl/file_prefix",
            "outputBinding": {
              "glob": "file_prefix",
              "loadContents": true,
              "outputEval": "$(self[0].contents)"
            },
            "type": "string"
          },
          {
            "id": "#splitfilename_python.cwl/file_suffix",
            "outputBinding": {
              "glob": "file_suffix",
              "loadContents": true,
              "outputEval": "$(self[0].contents)"
            },
            "type": "string"
          }
        ],
        "requirements": [
          {
            "class": "DockerRequirement",
            "dockerPull": "python:3.7"
          },
          {
            "class": "ResourceRequirement",
            "coresMax": 1,
            "coresMin": 1,
            "ramMax": 200,
            "ramMin": 200
          },
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "class": "InitialWorkDirRequirement",
            "listing": [
              {
                "entry": "import os\nimport sys\n\ndef main(file_path):\n    bname = os.path.basename(file_path)\n    pfx = bname.split(\"chr\")[0] + 'chr'\n    with open('file_prefix', 'wt') as o:\n        o.write(pfx)\n\n    sfx = \".\" + \".\".join(bname.split(\"chr\")[1].split(\".\")[1:])\n    with open('file_suffix', 'wt') as o:\n        o.write(sfx)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n",
                "entryname": "splitfilename.py"
              }
            ]
          }
        ]
      },
      {
        "arguments": [],
        "baseCommand": [
          "python3",
          "filter-segments.py"
        ],
        "class": "CommandLineTool",
        "cwlVersion": "v1.0",
        "doc": "Wraps the UW-GAC TopMED tool `define_segments.R`. Also produces a list of\nintegers representing the lines in the segments.txt file that can be used to\nscatter assoc_single_r.cwl\n",
        "id": "#filter_segments.cwl",
        "inputs": [
          {
            "id": "#filter_segments.cwl/file_prefix",
            "type": "string"
          },
          {
            "id": "#filter_segments.cwl/file_suffix",
            "type": "string"
          },
          {
            "doc": "List of GDS filenames",
            "id": "#filter_segments.cwl/gds_filenames",
            "label": "GDS filenames",
            "type": {
              "items": "string",
              "type": "array"
            }
          },
          {
            "doc": "segments.txt file produced by define_segments_r.cwl",
            "id": "#filter_segments.cwl/segment_file",
            "type": "File"
          }
        ],
        "outputs": [
          {
            "id": "#filter_segments.cwl/chromosomes",
            "outputBinding": {
              "glob": "chromosomes_present.txt",
              "loadContents": true,
              "outputEval": "$(self[0].contents.split(\",\");)"
            },
            "type": {
              "items": "string",
              "type": "array"
            }
          },
          {
            "id": "#filter_segments.cwl/segments",
            "outputBinding": {
              "glob": "segments_present.txt",
              "loadContents": true,
              "outputEval": "$(self[0].contents.split(\",\");)"
            },
            "type": {
              "items": "string",
              "type": "array"
            }
          }
        ],
        "requirements": [
          {
            "class": "ResourceRequirement",
            "coresMax": 1,
            "coresMin": 1,
            "ramMax": 2000,
            "ramMin": 2000
          },
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "class": "InitialWorkDirRequirement",
            "listing": [
              {
                "entry": "${\n   return inputs.gds_filenames.join('\\n');\n }\n",
                "entryname": "gds_filenames.list"
              },
              {
                "entry": "# Extract lists of chromosomes and segment lines valid for the data\nimport os\n\n\ndef main():\n    file_prefix = \"$(inputs.file_prefix)\"\n    file_suffix = \"$(inputs.file_suffix)\"\n    segments_file = \"$(inputs.segment_file.path)\"\n\n    available_gds_files = set()\n    with open(\"gds_filenames.list\", \"rt\") as f:\n        for line in f:\n            available_gds_files.add(os.path.basename(line.rstrip(\"\\r\\n\")))\n    chromosomes_present = set()\n    segments = []\n    with open(segments_file, \"r\") as f:\n        for n, line in enumerate(f.readlines()):\n            chrom = line.split()[0]\n            if file_prefix + chrom + file_suffix in available_gds_files:\n                chromosomes_present.add(chrom)\n                segments += [n] \n                # R uses 1 indexing, but line 0 is the header, so it all works out\n\n    with open(\"chromosomes_present.txt\", \"w\") as f:\n        f.write(\",\".join([str(c) for c in chromosomes_present]))\n\n    with open(\"segments_present.txt\", \"w\") as f:\n        f.write(\",\".join([str(s) for s in segments]))\n\n\nif __name__ == \"__main__\":\n    main()\n",
                "entryname": "filter-segments.py"
              }
            ]
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "python:3.7"
          }
        ]
      },
      {
        "arguments": [],
        "baseCommand": [
          "sh",
          "script.sh"
        ],
        "class": "CommandLineTool",
        "cwlVersion": "v1.0",
        "doc": "Wraps the UW-GAC TopMED tool `assoc_single.R`\n",
        "id": "#assoc_single_r.cwl",
        "inputs": [
          {
            "id": "#assoc_single_r.cwl/phenotype_file",
            "type": "File"
          },
          {
            "id": "#assoc_single_r.cwl/segment_file",
            "type": "File"
          },
          {
            "id": "#assoc_single_r.cwl/file_prefix",
            "type": "string"
          },
          {
            "id": "#assoc_single_r.cwl/file_suffix",
            "type": "string"
          },
          {
            "doc": "List of GDS files produced by VCF2GDS tool.",
            "id": "#assoc_single_r.cwl/gds_files",
            "label": "GDS file",
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "default": "hg38",
            "id": "#assoc_single_r.cwl/genome_build",
            "type": {
              "symbols": [
                "hg38",
                "hg19"
              ],
              "type": "enum"
            }
          },
          {
            "id": "#assoc_single_r.cwl/null_model_file",
            "type": "File"
          },
          {
            "default": "sva_",
            "id": "#assoc_single_r.cwl/out_prefix",
            "type": [
              "string",
              "null"
            ]
          },
          {
            "id": "#assoc_single_r.cwl/segment",
            "type": "string"
          }
        ],
        "outputs": [
          {
            "id": "#assoc_single_r.cwl/assoc_single",
            "outputBinding": {
              "glob": "$(inputs.out_prefix + '*')"
            },
            "type": [
              "File",
              "null"
            ]
          }
        ],
        "requirements": [
          {
            "class": "DockerRequirement",
            "dockerPull": "uwgac/topmed-master:2.6.0"
          },
          {
            "class": "ResourceRequirement",
            "coresMax": 1,
            "coresMin": 1,
            "ramMax": 2000,
            "ramMin": 2000
          },
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "class": "InitialWorkDirRequirement",
            "listing": [
              "$(inputs.gds_files)",
              {
                "entry": "out_prefix $(inputs.out_prefix)\ngenome_build $(inputs.genome_build)\ngds_file \"$(inputs.file_prefix) $(inputs.file_suffix)\"\nnull_model_file \"$(inputs.null_model_file.path)\"\nphenotype_file \"$(inputs.phenotype_file.path)\"\nsegment_file \"$(inputs.segment_file.path)\"\n",
                "entryname": "assoc_single.config"
              },
              {
                "entry": "${\n   var result = [];\n   var segval = parseInt(inputs.segment);\n   var segnum = segval + 1;\n\n   result.push(\"set -x\");\n   result.push(\"CHROM=\" + \"\\\"$(awk 'NR==\" + segnum.toString() + \" {print $1}' \" + inputs.segment_file.path + \")\\\"\");\n   result.push(\"Rscript /usr/local/analysis_pipeline/R/assoc_single.R assoc_single.config --chromosome $CHROM --segment \" + segval.toString());\n   return result.join('\\n');\n }\n",
                "entryname": "script.sh"
              }
            ]
          }
        ]
      },
      {
        "baseCommand": [
          "Rscript",
          "/usr/local/analysis_pipeline/R/assoc_combine.R",
          "assoc_combine.config"
        ],
        "class": "CommandLineTool",
        "cwlVersion": "v1.0",
        "doc": "Wraps the UW-GAC TopMED tool `assoc_combine.R` for single association only\n",
        "id": "#assoc_combine_r.cwl",
        "inputs": [
          {
            "id": "#assoc_combine_r.cwl/chromosome",
            "inputBinding": {
              "prefix": "--chromosome"
            },
            "type": "string"
          },
          {
            "doc": "List of files produced by assoc_single_r tool.",
            "id": "#assoc_combine_r.cwl/file_shards",
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "id": "#assoc_combine_r.cwl/out_prefix",
            "type": "string"
          }
        ],
        "outputs": [
          {
            "id": "#assoc_combine_r.cwl/combined",
            "outputBinding": {
              "glob": "$(inputs.out_prefix + '_chr' + inputs.chromosome + '.RData')"
            },
            "type": [
              "File",
              "null"
            ]
          }
        ],
        "requirements": [
          {
            "class": "DockerRequirement",
            "dockerPull": "uwgac/topmed-master:2.6.0"
          },
          {
            "class": "ResourceRequirement",
            "coresMax": 1,
            "coresMin": 1,
            "ramMax": 2000,
            "ramMin": 2000
          },
          {
            "class": "InitialWorkDirRequirement",
            "listing": [
              "$(inputs.file_shards)",
              {
                "entry": "out_prefix $(inputs.out_prefix)\nassoc_type \"single\"\n",
                "entryname": "assoc_combine.config"
              }
            ]
          }
        ]
      },
      {
        "arguments": [],
        "baseCommand": [
          "Rscript",
          "/usr/local/analysis_pipeline/R/assoc_plots.R",
          "plots.config"
        ],
        "class": "CommandLineTool",
        "cwlVersion": "v1.0",
        "doc": "Wraps the UW-GAC TopMED tool `assoc_plots.R`\n",
        "id": "#assoc_plots_r.cwl",
        "inputs": [
          {
            "id": "#assoc_plots_r.cwl/out_prefix",
            "type": "string"
          },
          {
            "id": "#assoc_plots_r.cwl/chromosomes",
            "type": {
              "items": "string",
              "type": "array"
            }
          },
          {
            "doc": "List of files from assoc_combine_r.cwl",
            "id": "#assoc_plots_r.cwl/combined",
            "type": {
              "items": "File",
              "type": "array"
            }
          }
        ],
        "outputs": [
          {
            "id": "#assoc_plots_r.cwl/plots",
            "outputBinding": {
              "glob": "*.png"
            },
            "type": {
              "items": "File",
              "type": "array"
            }
          }
        ],
        "requirements": [
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "class": "InitialWorkDirRequirement",
            "listing": [
              "$(inputs.combined)",
              {
                "entry": "${\n   var ret = [];\n   ret.push('assoc_type \"single\"');\n   ret.push('assoc_file \"' + inputs.out_prefix + '_chr .RData\"');\n   ret.push('chromosomes \"' + inputs.chromosomes.join(' ') + '\"');\n   ret.push('out_file_manh \"' + inputs.out_prefix + '_manhattan.png\"');\n   ret.push('out_file_qq \"' + inputs.out_prefix + '_qq.png\"');\n   return ret.join('\\n');\n }\n",
                "entryname": "plots.config"
              }
            ]
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "uwgac/topmed-master:2.6.0"
          },
          {
            "class": "ResourceRequirement",
            "coresMax": 1,
            "coresMin": 1,
            "ramMax": 2000,
            "ramMin": 2000
          }
        ]
      },
      {
        "arguments": [],
        "baseCommand": [
          "Rscript",
          "/usr/local/analysis_pipeline/R/define_segments.R",
          "define_segments.config"
        ],
        "class": "CommandLineTool",
        "cwlVersion": "v1.0",
        "doc": "Wraps the UW-GAC TopMED tool `define_segments.R`.\n",
        "id": "#define_segments_r.cwl",
        "inputs": [
          {
            "doc": "Number of segments (overrides segment length)",
            "id": "#define_segments_r.cwl/n_segments",
            "inputBinding": {
              "prefix": "--n_segments"
            },
            "type": [
              "int",
              "null"
            ]
          },
          {
            "default": 10000,
            "doc": "Segment length in kb",
            "id": "#define_segments_r.cwl/segment_length",
            "inputBinding": {
              "prefix": "--segment_length"
            },
            "type": [
              "int",
              "null"
            ]
          },
          {
            "default": "hg38",
            "id": "#define_segments_r.cwl/genome_build",
            "type": {
              "symbols": [
                "hg38",
                "hg19"
              ],
              "type": "enum"
            }
          }
        ],
        "outputs": [
          {
            "id": "#define_segments_r.cwl/segment_file",
            "outputBinding": {
              "glob": "segments.txt"
            },
            "type": "File"
          }
        ],
        "requirements": [
          {
            "class": "DockerRequirement",
            "dockerPull": "uwgac/topmed-master:2.6.0"
          },
          {
            "class": "ResourceRequirement",
            "coresMax": 1,
            "coresMin": 1,
            "ramMax": 2000,
            "ramMin": 2000
          },
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "class": "InitialWorkDirRequirement",
            "listing": [
              {
                "entry": "genome_build $(inputs.genome_build)\nout_file segments.txt\n",
                "entryname": "define_segments.config"
              }
            ]
          }
        ]
      },
      {
        "class": "Workflow",
        "cwlVersion": "v1.0",
        "doc": "UW GAC (GENESIS) Singe Variant Association Workflow.\n\nThis is a CWL wrapper for the [UW GAC Single-Variant Association pipeline](https://github.com/UW-GAC/analysis_pipeline#single-variant) \n\n_Filename requirements_:\nThe input GDS file names should follow the pattern <A>chr<X>.<y>\nFor example: 1KG_phase3_subset_chr1.gds\nSome of the tools inside the workflow infer the chromosome number from the\nfile by expecting this pattern of file name.\n",
        "id": "#single-variant-association-wf.cwl",
        "inputs": [
          {
            "id": "#single-variant-association-wf.cwl/phenotype_file",
            "type": "File"
          },
          {
            "default": 10000,
            "doc": "Segment length in kb",
            "id": "#single-variant-association-wf.cwl/segment_length",
            "type": [
              "int",
              "null"
            ]
          },
          {
            "doc": "List of GDS files produced by VCF2GDS tool.",
            "id": "#single-variant-association-wf.cwl/gds_files",
            "label": "GDS file",
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "default": "hg19",
            "id": "#single-variant-association-wf.cwl/genome_build",
            "type": {
              "symbols": [
                "hg38",
                "hg19"
              ],
              "type": "enum"
            }
          },
          {
            "doc": "Number of segments (overrides segment length)",
            "id": "#single-variant-association-wf.cwl/n_segments",
            "type": [
              "int",
              "null"
            ]
          },
          {
            "id": "#single-variant-association-wf.cwl/null_model_outputs",
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "default": "sva_",
            "id": "#single-variant-association-wf.cwl/out_prefix",
            "type": [
              "string",
              "null"
            ]
          }
        ],
        "label": "UW GAC (GENESIS) Single Variant Association Workflow",
        "outputs": [
          {
            "id": "#single-variant-association-wf.cwl/data",
            "outputSource": "#single-variant-association-wf.cwl/combine_shards/combined",
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "id": "#single-variant-association-wf.cwl/plots",
            "outputSource": "#single-variant-association-wf.cwl/plot/plots",
            "type": {
              "items": "File",
              "type": "array"
            }
          }
        ],
        "requirements": [
          {
            "class": "StepInputExpressionRequirement"
          },
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "class": "ScatterFeatureRequirement"
          }
        ],
        "steps": [
          {
            "id": "#single-variant-association-wf.cwl/split_filename",
            "in": [
              {
                "id": "#single-variant-association-wf.cwl/split_filename/vcf_file",
                "source": "#single-variant-association-wf.cwl/gds_files",
                "valueFrom": "$(self[0])"
              }
            ],
            "out": [
              "#single-variant-association-wf.cwl/split_filename/file_prefix",
              "#single-variant-association-wf.cwl/split_filename/file_suffix"
            ],
            "run": "#splitfilename_python.cwl"
          },
          {
            "id": "#single-variant-association-wf.cwl/filter_segments",
            "in": [
              {
                "id": "#single-variant-association-wf.cwl/filter_segments/file_prefix",
                "source": "#single-variant-association-wf.cwl/split_filename/file_prefix"
              },
              {
                "id": "#single-variant-association-wf.cwl/filter_segments/file_suffix",
                "source": "#single-variant-association-wf.cwl/split_filename/file_suffix"
              },
              {
                "id": "#single-variant-association-wf.cwl/filter_segments/gds_filenames",
                "source": "#single-variant-association-wf.cwl/gds_files",
                "valueFrom": "${ var names = []; for(var i = 0; i < self.length; i++) { names.push(self[i].path) } return names }"
              },
              {
                "id": "#single-variant-association-wf.cwl/filter_segments/segment_file",
                "source": "#single-variant-association-wf.cwl/define_segments/segment_file"
              }
            ],
            "out": [
              "#single-variant-association-wf.cwl/filter_segments/chromosomes",
              "#single-variant-association-wf.cwl/filter_segments/segments"
            ],
            "run": "#filter_segments.cwl"
          },
          {
            "id": "#single-variant-association-wf.cwl/single_association",
            "in": [
              {
                "id": "#single-variant-association-wf.cwl/single_association/gds_files",
                "source": "#single-variant-association-wf.cwl/gds_files"
              },
              {
                "id": "#single-variant-association-wf.cwl/single_association/genome_build",
                "source": "#single-variant-association-wf.cwl/genome_build"
              },
              {
                "id": "#single-variant-association-wf.cwl/single_association/out_prefix",
                "source": "#single-variant-association-wf.cwl/out_prefix"
              },
              {
                "id": "#single-variant-association-wf.cwl/single_association/phenotype_file",
                "source": "#single-variant-association-wf.cwl/phenotype_file"
              },
              {
                "id": "#single-variant-association-wf.cwl/single_association/segment",
                "source": "#single-variant-association-wf.cwl/filter_segments/segments"
              },
              {
                "id": "#single-variant-association-wf.cwl/single_association/file_prefix",
                "source": "#single-variant-association-wf.cwl/split_filename/file_prefix"
              },
              {
                "id": "#single-variant-association-wf.cwl/single_association/file_suffix",
                "source": "#single-variant-association-wf.cwl/split_filename/file_suffix"
              },
              {
                "id": "#single-variant-association-wf.cwl/single_association/null_model_file",
                "source": "#single-variant-association-wf.cwl/null_model_outputs",
                "valueFrom": "${\n    var fil;\n    var suffix = \"_reportonly.RData\";\n    for (var i=0; i < self.length; i++) {\n      var curr = self[i];\n      if(typeof(curr.basename) == 'undefined' || curr.basename === null) {\n          var is_good = curr.path.indexOf(suffix, curr.path.length - suffix.length) === -1;\n      } else {\n          var is_good = curr.basename.indexOf(suffix, curr.basename.length - suffix.length) === -1;\n      }\n      if (is_good) {\n        fil = curr;\n        break;\n      }\n    }\n    return fil;\n }\n"
              },
              {
                "id": "#single-variant-association-wf.cwl/single_association/segment_file",
                "source": "#single-variant-association-wf.cwl/define_segments/segment_file"
              }
            ],
            "out": [
              "#single-variant-association-wf.cwl/single_association/assoc_single"
            ],
            "run": "#assoc_single_r.cwl",
            "scatter": "#single-variant-association-wf.cwl/single_association/segment"
          },
          {
            "id": "#single-variant-association-wf.cwl/combine_shards",
            "in": [
              {
                "id": "#single-variant-association-wf.cwl/combine_shards/chromosome",
                "source": "#single-variant-association-wf.cwl/filter_segments/chromosomes"
              },
              {
                "id": "#single-variant-association-wf.cwl/combine_shards/file_shards",
                "source": "#single-variant-association-wf.cwl/single_association/assoc_single",
                "valueFrom": "${ var file = []; for(var i = 0 ; i < self.length; i++) { if(self[i]) { file.push(self[i]) } } return file }"
              },
              {
                "id": "#single-variant-association-wf.cwl/combine_shards/out_prefix",
                "source": "#single-variant-association-wf.cwl/out_prefix"
              }
            ],
            "out": [
              "#single-variant-association-wf.cwl/combine_shards/combined"
            ],
            "run": "#assoc_combine_r.cwl",
            "scatter": "#single-variant-association-wf.cwl/combine_shards/chromosome"
          },
          {
            "id": "#single-variant-association-wf.cwl/plot",
            "in": [
              {
                "id": "#single-variant-association-wf.cwl/plot/chromosomes",
                "source": "#single-variant-association-wf.cwl/filter_segments/chromosomes"
              },
              {
                "id": "#single-variant-association-wf.cwl/plot/combined",
                "source": "#single-variant-association-wf.cwl/combine_shards/combined"
              },
              {
                "id": "#single-variant-association-wf.cwl/plot/out_prefix",
                "source": "#single-variant-association-wf.cwl/out_prefix"
              }
            ],
            "out": [
              "#single-variant-association-wf.cwl/plot/plots"
            ],
            "run": "#assoc_plots_r.cwl"
          },
          {
            "id": "#single-variant-association-wf.cwl/define_segments",
            "in": [
              {
                "id": "#single-variant-association-wf.cwl/define_segments/genome_build",
                "source": "#single-variant-association-wf.cwl/genome_build"
              },
              {
                "id": "#single-variant-association-wf.cwl/define_segments/n_segments",
                "source": "#single-variant-association-wf.cwl/n_segments"
              },
              {
                "id": "#single-variant-association-wf.cwl/define_segments/segment_length",
                "source": "#single-variant-association-wf.cwl/segment_length"
              }
            ],
            "out": [
              "#single-variant-association-wf.cwl/define_segments/segment_file"
            ],
            "run": "#define_segments_r.cwl"
          }
        ]
      },
      {
        "class": "Workflow",
        "cwlVersion": "v1.0",
        "id": "#main",
        "inputs": [
          {
            "default": "hg19",
            "id": "#main/genome_build",
            "type": {
              "symbols": [
                "hg38",
                "hg19"
              ],
              "type": "enum"
            }
          },
          {
            "doc": "Number of segments (overrides segment length)",
            "id": "#main/n_segments",
            "type": [
              "int",
              "null"
            ]
          },
          {
            "default": 0,
            "doc": "Number of PCs to include as covariates.",
            "id": "#main/n_pcs",
            "type": [
              "int",
              "null"
            ]
          },
          {
            "doc": "Names of columns phenotype_file containing covariates. Separate by spaces.\ne.g. `gender height healthy`",
            "id": "#main/covariates",
            "type": [
              "string",
              "null"
            ]
          },
          {
            "default": "FALSE",
            "doc": "TRUE if outcome is a binary (case/control) variable;\nFALSE if outcome is a continuous variable.",
            "id": "#main/outcome_is_binary",
            "type": {
              "symbols": [
                "TRUE",
                "FALSE"
              ],
              "type": "enum"
            }
          },
          {
            "doc": "RData file with PCA results created by PC-AiR.",
            "id": "#main/pca_file",
            "type": [
              "File",
              "null"
            ]
          },
          {
            "doc": "RData or GDS file with a kinship matrix or GRM.",
            "id": "#main/relatedness_matrix_file",
            "type": [
              "File",
              "null"
            ]
          },
          {
            "doc": "List of GDS files produced by VCF2GDS tool.",
            "id": "#main/gds_files",
            "label": "GDS file",
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "default": "genesis_vadc",
            "doc": "Prefix for files created by the software",
            "id": "#main/out_prefix",
            "type": [
              "string",
              "null"
            ]
          },
          {
            "doc": "Name of column in Phenotype File containing outcome variable.",
            "id": "#main/outcome",
            "type": "string"
          },
          {
            "doc": "RData file with AnnotatedDataFrame of phenotypes.",
            "id": "#main/phenotype_file",
            "type": "File"
          },
          {
            "doc": "RData object containing a vector of samples to include.",
            "id": "#main/sample_include_file",
            "type": [
              "File",
              "null"
            ]
          },
          {
            "default": 10000,
            "doc": "Segment length in kb",
            "id": "#main/segment_length",
            "type": [
              "int",
              "null"
            ]
          }
        ],
        "label": "GENESIS null model and single variant association workflow",
        "outputs": [
          {
            "id": "#main/null_model_outputs",
            "outputSource": "#main/run_null_model/null_model_files",
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "id": "#main/null_model_phenotype",
            "outputSource": "#main/run_null_model/null_model_phenotype_file",
            "type": "File"
          },
          {
            "id": "#main/null_model_reports",
            "outputSource": "#main/run_null_model/null_model_reports",
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "id": "#main/single_assoc_gwas_data",
            "outputSource": "#main/run_single_association_wf/data",
            "type": {
              "items": "File",
              "type": "array"
            }
          },
          {
            "id": "#main/single_assoc_gwas_plots",
            "outputSource": "#main/run_single_association_wf/plots",
            "type": {
              "items": "File",
              "type": "array"
            }
          }
        ],
        "requirements": [
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "class": "ScatterFeatureRequirement"
          },
          {
            "class": "StepInputExpressionRequirement"
          },
          {
            "class": "SubworkflowFeatureRequirement"
          }
        ],
        "steps": [
          {
            "id": "#main/run_null_model",
            "in": [
              {
                "id": "#main/run_null_model/sample_include_file",
                "source": "#main/sample_include_file"
              },
              {
                "id": "#main/run_null_model/n_pcs",
                "source": "#main/n_pcs"
              },
              {
                "id": "#main/run_null_model/covariates",
                "source": "#main/covariates"
              },
              {
                "id": "#main/run_null_model/out_prefix",
                "source": "#main/out_prefix",
                "valueFrom": "$(self + '_null_model')"
              },
              {
                "id": "#main/run_null_model/outcome",
                "source": "#main/outcome"
              },
              {
                "id": "#main/run_null_model/outcome_is_binary",
                "source": "#main/outcome_is_binary"
              },
              {
                "id": "#main/run_null_model/pca_file",
                "source": "#main/pca_file"
              },
              {
                "id": "#main/run_null_model/phenotype_file",
                "source": "#main/phenotype_file"
              },
              {
                "id": "#main/run_null_model/relatedness_matrix_file",
                "source": "#main/relatedness_matrix_file"
              }
            ],
            "out": [
              "#main/run_null_model/null_model_files",
              "#main/run_null_model/null_model_phenotype_file",
              "#main/run_null_model/null_model_reports"
            ],
            "run": "#null-model-wf.cwl"
          },
          {
            "id": "#main/run_single_association_wf",
            "in": [
              {
                "id": "#main/run_single_association_wf/genome_build",
                "source": "#main/genome_build"
              },
              {
                "id": "#main/run_single_association_wf/n_segments",
                "source": "#main/n_segments"
              },
              {
                "id": "#main/run_single_association_wf/null_model_outputs",
                "source": "#main/run_null_model/null_model_files"
              },
              {
                "id": "#main/run_single_association_wf/out_prefix",
                "source": "#main/out_prefix",
                "valueFrom": "$(self + '_single_assoc')"
              },
              {
                "id": "#main/run_single_association_wf/phenotype_file",
                "source": "#main/run_null_model/null_model_phenotype_file"
              },
              {
                "id": "#main/run_single_association_wf/segment_length",
                "source": "#main/segment_length"
              },
              {
                "id": "#main/run_single_association_wf/gds_files",
                "source": "#main/gds_files"
              }
            ],
            "out": [
              "#main/run_single_association_wf/data",
              "#main/run_single_association_wf/plots"
            ],
            "run": "#single-variant-association-wf.cwl"
          }
        ]
      }
    ],
    "cwlVersion": "v1.0"
  }
}